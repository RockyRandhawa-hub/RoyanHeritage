// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id        Int     @id @default(autoincrement())
  FirstName String
  LastName  String?
  email     String  @unique
  password  String
}

model SlotAvailability {
  id         Int      @id @default(autoincrement())
  date       DateTime
  slot       Slot
  totalLimit Int      @default(18)
  remaining  Int
  createdAt  DateTime @default(now())
}


model TempOrder {
  id                    Int          @id @default(autoincrement())
  razorpayOrderId       String?      @unique
  cashfreeOrderId       String?      @unique
  name                  String
  mobile                String
  slot                  Slot
  date                  DateTime
  requestedTickets      Int
  createdAt             DateTime     @default(now())
  
  // ✅ NEW PAYMENT TRACKING FIELDS
  paymentStatus         PaymentStatus @default(PENDING)
  cfPaymentId          String?
  paymentMethod        String?
  paymentSessionId     String?
  webhookReceived      Boolean      @default(false)
  verificationAttempts Int          @default(0)
  updatedAt            DateTime     @updatedAt
  
  tempTickets           TempTicket[]
}
model TempTicket {
  id          Int       @id @default(autoincrement())
  name        String
  age         Int
  army        Boolean   @default(false)
  tempOrder   TempOrder @relation(fields: [tempOrderId], references: [id])
  tempOrderId Int
}
enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
}

model Visitor {
  id         Int      @id @default(autoincrement())
  name       String
  mobile     String   
  hasVisited Boolean  @default(false)
  tickets    Ticket[]
}

model Ticket {
  id        Int      @id @default(autoincrement())
  quantity  Int // Number of visitors
  date      DateTime
  slot      Slot // ENUM
  visitor   Visitor  @relation(fields: [visitorId], references: [id])
  visitorId Int
  createdAt DateTime @default(now())
  persons   Person[]
}

model Person {
  id       Int     @id @default(autoincrement())
  name     String
  age      Int
  army     Boolean @default(false)
  ticket   Ticket  @relation(fields: [ticketId], references: [id])
  ticketId Int
}

//  Breakdown:
// visitor → Ye relation ka naam hai (Prisma ko bol rahe ho ki ek connection hai Ticket aur Visitor ke beech)

// Visitor → Ye kaunse model se connect ho raha hai

// @relation(...) → Ye relation ka technical config batata hai:

// fields: [visitorId] → Is model (Ticket) ka field visitorId foreign key banega

// references: [id] → Ye Visitor model ke id field ko point karega

enum Slot {
  TUESDAY_EVENING
  SATURDAY_EVENING
  SUNDAY_MORNING
  
}
